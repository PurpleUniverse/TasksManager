name: Task Manager CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Manual trigger for emergency rollbacks
  workflow_dispatch:
    inputs:
      rollback_version:
        description: 'Version to rollback to (e.g., v0.1.0)'
        required: false
        default: ''

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/task-manager-api
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/task-manager-frontend

jobs:
  # Validate and test backend
  backend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build and test with Maven
        working-directory: ./backend
        run: ./mvnw verify

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: backend-test-results
          path: ./backend/target/surefire-reports

  # Validate and test frontend
  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Lint frontend
        working-directory: ./frontend
        run: npm run lint

      - name: Test frontend
        working-directory: ./frontend
        run: npm test -- --passWithNoTests

  # Build and push Docker images
  build-and-push:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate version tag
        id: version
        run: |
          if [[ "${{ github.event.inputs.rollback_version }}" != "" ]]; then
            echo "VERSION=${{ github.event.inputs.rollback_version }}" >> $GITHUB_ENV
            echo "IS_ROLLBACK=true" >> $GITHUB_ENV
          else
            # Generate version based on timestamp and commit hash
            TIMESTAMP=$(date +'%Y%m%d%H%M%S')
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            echo "VERSION=v${TIMESTAMP}-${SHORT_SHA}" >> $GITHUB_ENV
            echo "IS_ROLLBACK=false" >> $GITHUB_ENV
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.VERSION }}
            type=raw,value=latest,enable=${{ env.IS_ROLLBACK != 'true' }}

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.VERSION }}
            type=raw,value=latest,enable=${{ env.IS_ROLLBACK != 'true' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          build-args: |
            BUILD_VERSION=${{ env.VERSION }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          build-args: |
            API_URL=http://localhost:8080
            VERSION=${{ env.VERSION }}

      - name: Create deployment configuration
        run: |
          mkdir -p deploy
          cat <<EOF > deploy/docker-compose.${{ env.VERSION }}.yml
          version: '3.8'
          
          services:
            mongodb:
              image: mongo:6.0
              container_name: task-manager-mongodb
              ports:
                - "27017:27017"
              volumes:
                - mongodb_data:/data/db
              networks:
                - task-manager-network
          
            task-manager-api:
              image: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.VERSION }}
              container_name: task-manager-api
              environment:
                - SPRING_DATA_MONGODB_HOST=mongodb
                - SPRING_DATA_MONGODB_PORT=27017
                - SPRING_DATA_MONGODB_DATABASE=taskmanager
                - TOGGLZ_FEATURES_TASK_CATEGORIES_ENABLED=true
                - TOGGLZ_FEATURES_TASK_PRIORITIES_ENABLED=true
                - SPRING_WEB_CORS_ALLOWED_ORIGINS=http://localhost:3000
              ports:
                - "8080:8080"
              depends_on:
                - mongodb
              networks:
                - task-manager-network
          
            task-manager-frontend:
              image: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.VERSION }}
              container_name: task-manager-frontend
              ports:
                - "3000:80"
              depends_on:
                - task-manager-api
              networks:
                - task-manager-network
          
          networks:
            task-manager-network:
              driver: bridge
          
          volumes:
            mongodb_data:
          EOF
          
          # Create a version file for tracking
          echo ${{ env.VERSION }} > deploy/current-version.txt

      - name: Upload deployment configuration
        uses: actions/upload-artifact@v3
        with:
          name: deployment-config
          path: deploy/

  # Deploy to staging environment
  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: staging

    steps:
      - name: Download deployment configuration
        uses: actions/download-artifact@v3
        with:
          name: deployment-config
          path: deploy

      - name: Get version
        id: get-version
        run: echo "VERSION=$(cat deploy/current-version.txt)" >> $GITHUB_ENV

      - name: Deploy to staging environment
        run: |
          echo "Deploying version ${{ env.VERSION }} to staging environment"
          # In a real scenario, you would use SSH or other methods to deploy to your staging server
          # Example:
          # scp -r deploy user@staging-server:/opt/task-manager/
          # ssh user@staging-server "cd /opt/task-manager && docker-compose -f docker-compose.${{ env.VERSION }}.yml up -d"
          
          # For demonstration purposes:
          echo "Deployed version ${{ env.VERSION }} to staging"
          echo "STAGED_VERSION=${{ env.VERSION }}" >> $GITHUB_ENV

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging environment"
          # In a real scenario, you would run automated tests against your staging deployment
          # Example:
          # npm run test:e2e -- --url=https://staging.task-manager.example.com
          
          # For demonstration purposes:
          echo "Smoke tests passed for version ${{ env.VERSION }}"

  # Deploy to production (with approval)
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment:
      name: production
      url: https://task-manager.example.com

    steps:
      - name: Download deployment configuration
        uses: actions/download-artifact@v3
        with:
          name: deployment-config
          path: deploy

      - name: Get version
        id: get-version
        run: echo "VERSION=$(cat deploy/current-version.txt)" >> $GITHUB_ENV

      - name: Deploy to production
        run: |
          echo "Deploying version ${{ env.VERSION }} to production environment"
          # In a real scenario, you would use SSH or other methods to deploy to your production server
          # Example:
          # scp -r deploy user@production-server:/opt/task-manager/
          # ssh user@production-server "cd /opt/task-manager && docker-compose -f docker-compose.${{ env.VERSION }}.yml up -d"
          
          # For demonstration purposes:
          echo "Deployed version ${{ env.VERSION }} to production"

      - name: Update symlink for latest stable version
        run: |
          echo "Creating symlink for easy rollback to version ${{ env.VERSION }}"
          # In a real scenario, you would maintain a symlink to the current stable version
          # Example:
          # ssh user@production-server "cd /opt/task-manager && ln -sf docker-compose.${{ env.VERSION }}.yml docker-compose.stable.yml"
          
          # For demonstration purposes:
          echo "Latest stable version is now ${{ env.VERSION }}"

      - name: Post-deployment verification
        run: |
          echo "Running verification checks on production deployment"
          # In a real scenario, you would run verification checks against your production deployment
          # Example:
          # curl -f https://task-manager.example.com/actuator/health
          
          # For demonstration purposes:
          echo "Production deployment of version ${{ env.VERSION }} verified successfully"